"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lab = void 0;
const code_1 = require("code");
const Lab = require("lab");
exports.lab = Lab.script();
const describe = exports.lab.describe;
const it = exports.lab.it;
const before = exports.lab.before;
const fs = require("fs");
const graphql = require("graphql");
const mkdirp = require("mkdirp");
const rimraf = require("rimraf");
const cli = require("../cli");
describe('GraphQL Validator CLI', () => {
    describe('#mergeGQLSchemas', () => {
        describe('when loading a schema glob', () => {
            const glob = './fixtures/schema/**/*.graphql';
            let schema;
            before((done) => {
                cli.mergeGQLSchemas(glob).then((s) => {
                    schema = s;
                    done();
                });
            });
            it('expect schema to be a graphql schema', (done) => {
                (0, code_1.expect)(schema).to.exist();
                (0, code_1.expect)(schema).to.be.an.instanceof(graphql.GraphQLSchema);
                done();
            });
        });
        describe(`When merging schema files with duplicate types.`, () => {
            const glob = './fixtures/invalidSchemas/**/*.graphql';
            let err;
            before((done) => {
                cli.mergeGQLSchemas(glob).catch((e) => {
                    err = e;
                    done();
                });
            });
            it('schema wont merge when having duplicate types', (done) => {
                (0, code_1.expect)(err).to.exist();
                done();
            });
        });
    });
    describe(`when loading an invalid glob`, () => {
        const glob = './fixtures/not/an/existing/path';
        let errs;
        cli.mergeGQLSchemas(glob).catch((e) => {
            errs = e;
        });
        it('expect error to exist', (done) => {
            (0, code_1.expect)(errs).to.exist();
            done();
        });
    });
    describe('#validateQueries', () => {
        let schema;
        before(() => cli.mergeGQLSchemas('./fixtures/schema/**/*.graphql').then((r) => schema = r));
        describe('when validating a query glob', () => {
            let results;
            const glob = './fixtures/queries/*.graphql';
            before((done) => {
                cli.validateOperations(glob, schema).then((r) => {
                    results = r;
                    done();
                });
            });
            it('expect results to be empty', (done) => {
                (0, code_1.expect)(results).to.be.undefined();
                done();
            });
        });
        describe('when validating a query glob with invalid queries', () => {
            let errs;
            const glob = './fixtures/queries/**/*.graphql';
            before((done) => {
                cli.validateOperations(glob, schema).catch((e) => {
                    errs = e;
                    done();
                });
            });
            it('expect validation results to exist', (done) => {
                (0, code_1.expect)(errs).to.be.an.array();
                (0, code_1.expect)(errs.length).to.equal(1);
                done();
            });
        });
        describe('when validating a glob with unreadable files', () => {
            const root = './fixtures/queries/unreadable';
            const glob = `${root}/*.graphql`;
            let errs;
            before((done) => {
                mkdirp(root, () => {
                    fs.writeFile(`${root}/operation.graphql`, 'hello', { mode: '333' }, (err) => {
                        cli.validateOperations(glob, schema).catch((e) => {
                            errs = e;
                            rimraf(root, done);
                        });
                    });
                });
            });
            it('expect error to exist', (done) => {
                (0, code_1.expect)(errs).to.exist();
                (0, code_1.expect)(errs.length).to.equal(1);
                done();
            });
        });
    });
});
//# sourceMappingURL=cli.test.js.map