"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lab = void 0;
const code_1 = require("code");
const Lab = require("lab");
exports.lab = Lab.script();
const describe = exports.lab.describe;
const it = exports.lab.it;
const before = exports.lab.before;
const fs = require("fs");
const cli = require("../cli");
const printers = require("../printers");
describe('GraphQL Schema Printers', () => {
    describe('#printSchemaWithDirectives', () => {
        describe(`When loading and printing a schema with directives.`, () => {
            const glob = './fixtures/directiveSchemas/**/*.graphql';
            let printedSchema;
            before((done) => {
                cli.mergeGQLSchemas(glob).then((s) => {
                    printedSchema = printers.printSchemaWithDirectives(s);
                    done();
                });
            });
            it('Has symmetric equality preserving directives', (done) => {
                (0, code_1.expect)(printedSchema).to.exist();
                const expectedSchema = fs.readFileSync('./fixtures/expectedOutput/directiveSchemas/printedWithDirectives.graphql', 'utf8');
                (0, code_1.expect)(printedSchema).to.equal(expectedSchema);
                done();
            });
        });
        describe(`When loading and printing the canonical schema example.`, () => {
            const glob = './fixtures/helloWorld/**/*.graphql';
            let printedSchema;
            before((done) => {
                cli.mergeGQLSchemas(glob).then((s) => {
                    printedSchema = printers.printSchemaWithDirectives(s);
                    done();
                });
            });
            it('Has symmetric equality preserving directives', (done) => {
                (0, code_1.expect)(printedSchema).to.exist();
                const expectedSchema = fs.readFileSync('./fixtures/expectedOutput/helloWorld/expectedOutput.graphql', 'utf8');
                (0, code_1.expect)(printedSchema).to.equal(expectedSchema);
                done();
            });
        });
        describe(`When loading and printing the custom input object in directive arguments.`, () => {
            const glob = './fixtures/inputObjectInDirective/**/*.graphql';
            let printedSchema;
            before((done) => {
                cli.mergeGQLSchemas(glob).then((s) => {
                    printedSchema = printers.printSchemaWithDirectives(s);
                    done();
                });
            });
            it('Has symmetric equality preserving directives', (done) => {
                (0, code_1.expect)(printedSchema).to.exist();
                const expectedSchema = fs.readFileSync('./fixtures/expectedOutput/inputObjectInDirective/printedInputObject.graphql', 'utf8');
                (0, code_1.expect)(printedSchema).to.equal(expectedSchema);
                done();
            });
        });
    });
    describe('#printSchemaDefault', () => {
        describe(`When loading and printing a schema with directives.`, () => {
            const glob = './fixtures/directiveSchemas/**/*.graphql';
            let printedSchema;
            before((done) => {
                cli.mergeGQLSchemas(glob).then((s) => {
                    printedSchema = printers.printSchemaDefault(s);
                    done();
                });
            });
            it('Has symmetric equality without custom directives', (done) => {
                (0, code_1.expect)(printedSchema).to.exist();
                const expectedSchema = fs.readFileSync('./fixtures/expectedOutput/directiveSchemas/printedDefault.graphql', 'utf8');
                (0, code_1.expect)(printedSchema).to.equal(expectedSchema);
                done();
            });
        });
        describe(`When loading and printing the canonical schema example with directives.`, () => {
            const glob = './fixtures/helloWorld/**/*.graphql';
            let printedSchema;
            before((done) => {
                cli.mergeGQLSchemas(glob).then((s) => {
                    printedSchema = printers.printSchemaWithDirectives(s);
                    done();
                });
            });
            it('Has symmetric equality preserving directives', (done) => {
                (0, code_1.expect)(printedSchema).to.exist();
                const expectedSchema = fs.readFileSync('./fixtures/expectedOutput/helloWorld/expectedOutput.graphql', 'utf8');
                (0, code_1.expect)(printedSchema).to.equal(expectedSchema);
                done();
            });
        });
    });
});
//# sourceMappingURL=printers.test.js.map