import { DocumentNode, GraphQLError, GraphQLSchema } from 'graphql';
import { ValidationRule } from './types';
export { mergeGQLSchemas, validateOperations } from './cli';
export interface IQueryFileError {
    file: string;
    errors: string[];
}
export interface ILoadQueryCallback {
    (err: any, docs?: DocumentNode[]): any;
}
export interface IValidateCallback {
    (errors?: IQueryFileError[], results?: DocumentNode[]): any;
}
export declare function validateQuery(schema: GraphQLSchema, document: DocumentNode, rules?: ReadonlyArray<ValidationRule>): ReadonlyArray<GraphQLError>;
export declare function loadQueryFiles(glob: string | string[], callback?: ILoadQueryCallback): Promise<DocumentNode[]>;
export declare function validateQueryFiles(glob: string, schema: GraphQLSchema, rules?: ReadonlyArray<ValidationRule>, callback?: IValidateCallback): Promise<IQueryFileError[]>;
export declare function validateQueries(docs: DocumentNode[], schema: GraphQLSchema, rules?: ReadonlyArray<ValidationRule>, files?: string[]): IQueryFileError[];
