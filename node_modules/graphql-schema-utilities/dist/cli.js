"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateOperations = exports.mergeGQLSchemas = void 0;
const validator = require("./index");
const logger_1 = require("./logger");
const utils = require("./utilities");
const validate_schema_1 = require("./validate-schema");
function mergeGQLSchemas(schemaPattern) {
    return new Promise((resolve, reject) => {
        logger_1.consoleLogger.log(`\nLoading schema from ${schemaPattern}`);
        utils.readGlob(schemaPattern).then((files) => {
            if (!files.length) {
                const noFilesMatching = `No matching files were found with Glob: ${schemaPattern}.`;
                logger_1.consoleLogger.error(noFilesMatching);
                reject(new Error(noFilesMatching));
            }
            Promise.all(files.map((file) => utils
                .readFile(file)
                .then((subSchema) => subSchema)
                .catch((error) => {
                logger_1.consoleLogger.error(`An error occurred while trying to read your graphql schemas in ${schemaPattern}. \n`, error);
                reject(error);
            }))).then((listOfSchemas) => {
                try {
                    const map = new Map();
                    files.forEach((fileName, index) => {
                        map.set(fileName, listOfSchemas[index]);
                    });
                    const mergedSchema = (0, validate_schema_1.validateSchemaWithSourceMap)(map);
                    resolve(mergedSchema);
                }
                catch (errs) {
                    reject(errs);
                }
            });
        });
    });
}
exports.mergeGQLSchemas = mergeGQLSchemas;
function validateOperations(queriesPattern, validSchema, rules) {
    return new Promise((resolve, reject) => {
        logger_1.consoleLogger.log(`\nValidating queries for ${queriesPattern} using loaded schema`);
        function outputErrors(errs) {
            logger_1.consoleLogger.log('\nErrors found:');
            errs.forEach((err) => {
                logger_1.consoleLogger.log(`\nFile: ${err.file}`);
                err.errors.forEach((errStr) => {
                    logger_1.consoleLogger.log(`\t${errStr}`);
                });
            });
            logger_1.consoleLogger.log('\n');
        }
        validator
            .validateQueryFiles(queriesPattern, validSchema, rules)
            .then(() => {
            logger_1.consoleLogger.log('All queries are valid\n');
            resolve();
        })
            .catch((errs) => {
            outputErrors(errs);
            reject(errs);
        });
    });
}
exports.validateOperations = validateOperations;
//# sourceMappingURL=cli.js.map